<!doctype html>
<html>
	<head>
		<meta charset="utf-8" />
		<title>Audio Sponge</title>
		<style>
			body {
				background: /*#0d1b21*/ #1f2733;
				color: #a4a9c3;
				font-family: sans-serif;
				/*max-width: 60em;
				margin: 0 auto;*/
				text-align: center;
			}
			code.block {
				display: block;
				white-space: pre-wrap;
				background: black;
				color: white;
				padding: 1em;
			}
			h1 {
				font-size: 3em;
			}
			h2 {
				font-size: 1.5em;
			}
			/* /!\ You may need to add vendor prefixes in order to render the CSS properly (can use autoprefixer) /!\ */
			#tridiv {
				perspective: 800px;
				position: absolute;
				overflow: hidden;
				left: 0;
				/* top: 50%; */
				width: 100%;
				height: 50%;
				background: transparent;
				font-size: 100%;
				min-height: 200px;
			}
			.face {
				box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.4);
			}
			.scene, .shape, .face, .face-wrapper, .cr,
			.surface-plane {
				position: absolute;
				transform-style: preserve-3d;
			}
			.scene {
				width: 80em;
				height: 80em;
				top: 50%;
				left: 50%;
				margin: -40em 0 0 -40em;
				pointer-events: none;
			}
			.shape {
				display: block;
				top: 50%;
				left: 50%;
				width: 0;
				height: 0;
				transform-origin: 50%;
				pointer-events: all;
			}
			.face, .face-wrapper {
				overflow: hidden;
				transform-origin: 0 0;
				backface-visibility: hidden;
				/* hidden by default, prevent blinking and other weird rendering glitchs */
			}
			.face {
				background-size: 100% 100%!important;
				background-position: center;
			}
			.face-wrapper .face {
				left: 100%;
				width: 100%;
				height: 100%;
			}
			.photon-shader {
				position: absolute;
				left: 0;
				top: 0;
				width: 100%;
				height: 100%;
				pointer-events: none;
			}
			.side {
				left: 50%;
			}
			.cr, .cr .side {
				height: 100%;
			}
			[class*="cuboid"] .ft, [class*="cuboid"] .bk {
				width: 100%;
				height: 100%;
			}
			[class*="cuboid"] .bk {
				left: 100%;
			}
			[class*="cuboid"] .rt {
				transform: rotateY(-90deg) translateX(-50%);
			}
			[class*="cuboid"] .lt {
				transform: rotateY(90deg) translateX(-50%);
			}
			[class*="cuboid"] .tp {
				transform: rotateX(90deg) translateY(-50%);
			}
			[class*="cuboid"] .bm {
				transform: rotateX(-90deg) translateY(-50%);
			}
			[class*="cuboid"] .lt {
				left: 100%;
			}
			[class*="cuboid"] .bm {
				top: 100%;
			}
			/* .cub-1 styles */
			.cub-1 {
				transform: translateY(-1.5em); /* this is to center the button *visually* on the surface which is cut off by the container */
				transform: translateY(calc(1em - 4vh)); /* magic trial-and-error code; probably depends on the height of unrelated stuff */
				opacity:1;
				width:25em;
				height:5em;
				margin:-2.5em 0 0 -12.5em;
			}
			.cub-1:active,
			.cub-1.pressed {
				transform: translateY(-1.5em) translateZ(-0.5em);
				transform: translateY(calc(1em - 4vh)) translateZ(-0.5em); /* magic trial-and-error code; probably depends on the height of unrelated stuff */
			}
			.cub-1,
			.cub-1 * {
				transition: .1s ease-out;
			}
			.cub-1 .ft {
				transform:translateZ(1.5em);
			}
			.cub-1 .bk {
				transform:translateZ(-1.5em) rotateY(180deg);
			}
			.cub-1 .rt, .cub-1 .lt {
				width:3em;
				height:5em;
			}
			.cub-1 .tp, .cub-1 .bm {
				width:25em;
				height:3em;
			}
			.cub-1 .face {
				background-color:#383354;
			}
			.cub-1:hover .face,
			.cub-1:focus .face {
				background-color:#443a79;
			}
			.cub-1:active .face,
			.cub-1.pressed .face {
				background-color:#4e409c;
			}
			.cub-1:active .rt,
			.cub-1:active .lt,
			.cub-1.pressed .rt,
			.cub-1.pressed .lt {
				width:2em;
			}
			.cub-1:active .tp,
			.cub-1:active .bm,
			.cub-1.pressed .tp,
			.cub-1.pressed .bm {
				height:2em;
			}
			.cub-1:active .ft,
			.cub-1.pressed .ft {
				transform:translateZ(1em);
			}
			.cub-1:active .bk,
			.cub-1.pressed .bk {
				transform:translateZ(-1em) rotateY(180deg);
			}
			button.shape {
				color: inherit;
				font: inherit;
			}
			.shape:focus {
				outline: none;
			}
			.button-label,
			.status-indicator {
				pointer-events: none;
			}
			.scene * {
				cursor: default;
				user-select: none;
				-o-user-select: none;
				-ms-user-select: none;
				-moz-user-select: none;
				-webkit-user-select: none;
			}
			.button-label {
				font-size: 2em;
				display: flex;
				align-items: center;
				justify-content: center;
				height: 100%;
			}
			.status-indicator {
				position: absolute;
				right: 5px;
				bottom: 5px;
				transform: translateZ(2.5em);
				transform-style: preserve-3d;
				background: rgba(0, 0, 0, 0.13); /* NOTE: should inherit light text color */
				text-shadow: rgba(8, 8, 8, 0.5) 0px 1px 1px;
				border: 1px solid rgba(0, 0, 0, 0.32);
				padding: 0.3em;
			}
			.status-indicator.live {
				color: #F44336;
			}
			.surface-plane {
				position: absolute;
				width: 100%;
				height: 100%;
				/*background: rgb(13, 27, 33);*/
				box-shadow: rgba(0, 0, 0, 0.18) 0 0 500px 0px inset;
				/*background: #ececec;*/
				transform: translateZ(-2em);
				background:
					radial-gradient(black 15%, transparent 16%) 0 0,
					radial-gradient(black 15%, transparent 16%) 8px 8px,
					radial-gradient(rgba(255,255,255,.1) 15%, transparent 20%) 0 1px,
					radial-gradient(rgba(255,255,255,.1) 15%, transparent 20%) 8px 9px;
				/*background-color:#282828;*/
				background-size:16px 16px;
			}
		</style>
	</head>
	<body>
		<h1>Audio Sponge</h1>
		{{!--
		<div>Authenticated as {{me.username}}</div>
		{{#each tracks}}
			<div class="track" data-id="{{id}}">
				<h3>{{title}}</h3>
				<p>{{description}}</p>
				<audio controls src="{{stream_url}}?client_id={{../client_id}}" preload="none"></audio>
			</div>
		{{/each}}
		--}}
		<h2>The Sponge of Truth and Lies</h2>
		<p>
			In equal and opposite measure
		</p>
		<p>
			Cathartic cacophony
		</p>
		<p>
			Retched reverbertations
		</p>
		<p>
			Automated abrasion
		</p>
		<div id="tridiv">
			<div class="scene" style="-webkit-transform:rotateX(21deg) rotateY(0deg); -moz-transform:rotateX(21deg) rotateY(0deg); -ms-transform:rotateX(21deg) rotateY(0deg); transform:rotateX(21deg) rotateY(0deg); ">
				<!-- <button class="listen-button shape cuboid-1 cub-1"> -->
				<div class="listen-button shape cuboid-1 cub-1" role="button" tabIndex="0">
					<div class="face ft">
						<div class="photon-shader" style="background-color: rgba(255, 255, 255, 0.0313726);"></div>
						<div class="button-label">
							<!-- <audio controls></audio> -->
						</div>
						<div class="status-indicator">Hello...</div>
					</div>
					<div class="face bk">
						<!-- <div class="photon-shader" style="background-color: rgba(255, 255, 255, 0.0313726);"></div> -->
					</div>
					<div class="face rt">
						<!-- <div class="photon-shader" style="background-color: rgba(255, 255, 255, 0.0313726);"></div> -->
					</div>
					<div class="face lt">
						<!-- <div class="photon-shader" style="background-color: rgba(255, 255, 255, 0.0313726);"></div> -->
					</div>
					<div class="face bm">
						<!-- <div class="photon-shader" style="background-color: rgba(255, 255, 255, 0.0313726);"></div> -->
					</div>
					<div class="face tp">
						<!-- <div class="photon-shader" style="background-color: rgba(255, 255, 255, 0.0313726);"></div> -->
					</div>
				<!-- </button> -->
				</div>
				<div class="surface-plane"></div>
			</div>
		</div>
		<script src="lib/coffee-script.js"></script>
		<script type="text/coffeescript">
			listen_button = document.querySelector(".listen-button")
			button_label = listen_button.querySelector(".button-label")
			status_indicator = listen_button.querySelector(".status-indicator")
			# posible_statuses = ["loading", "connecting", "offline", "live"]
			state = {}
			update = (new_state)->
				# status_indicator.classList.remove(each_status) for each_status in posible_statuses
				status_indicator.classList.remove(state.status)
				state[k] = v for k, v of new_state
				{status, listening} = state
				status_indicator.classList.add(status)
				status_indicator.innerHTML =
					switch status
						when "loading"
							"Loading..."
						when "connecting"
							"Connecting..."
						when "offline"
							"&#9679;&#xFE0E; Offline"
						when "live"
							"&#9679;&#xFE0E; Live"
				button_label.innerHTML =
					if listening
						"&#11035;&#xFE0E; Stop" # The End # You Cannot Pause
					else
						"&#9654;&#xFE0E; Listen"
			update status: "loading"
			setTimeout ->
				update status: "offline", listening: no
			, 500
			toggle_listen = ->
				if state.listening
					update listening: no
				else
					update status: "connecting"
					setTimeout ->
						update status: "live", listening: yes
					, 500
			
			listen_button.addEventListener "click", toggle_listen
			trigger_keys = [32, 13, 80] # Space, Enter, P
			window.addEventListener "keydown", (e)->
				if e.keyCode in trigger_keys
					listen_button.classList.add("pressed")
			window.addEventListener "keyup", (e)->
				return if e.target isnt listen_button and e.target.tagName in ["input", "textarea", "select", "button"]
				if e.keyCode in trigger_keys
					listen_button.classList.remove("pressed")
					toggle_listen()
		</script>
	</body>
</html>
